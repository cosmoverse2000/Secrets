# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

#backed nodes
/backend/node_modules
/backend/build
/backend/coverage
/backend/.env
/backend/.DS_Store
/backend/.env.local
/backend/.env.development.local
/backend/.env.test.local
/backend/.env.production.local
/backend/npm-debug.log*
/backend/yarn-debug.log*
/backend/yarn-error.log*
/backend/.codesandbox

/backend/node_modules
/backend/npm-debug.log
/backend/* Ds_store
/backend/*.env
/backend/logs
/backend/*.log


/backend/node_modules/
/backend/jspm_packages/
/backend/web_modules/
/backend/.npm
/backend/.eslintcache
/backend/.stylelintcache
/backend/.vscode-test
/backend/.cache
/backend/.parcel-cache

########################################################################
########################################################################
########################################################################
# dependencies
/node_modules
/functions
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

/node_modules
npm-debug.log
* Ds_store
/*.env
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
/.codesandbox

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*


.DS_STORE
node_modules
scripts/flow/*/.flowconfig
.flowconfig
*~
*.pyc
.grunt
_SpecRunner.html
__benchmarks__
build/
remote-repo/
coverage/
.module-cache
fixtures/dom/public/react-dom.js
fixtures/dom/public/react.js
test/the-files-to-test.generated.js
*.log*
chrome-user-data
*.sublime-project
*.sublime-workspace
.idea
*.iml
.vscode
*.swp
*.swo

packages/react-devtools-core/dist
packages/react-devtools-extensions/chrome/build
packages/react-devtools-extensions/chrome/*.crx
packages/react-devtools-extensions/chrome/*.pem
packages/react-devtools-extensions/firefox/build
packages/react-devtools-extensions/firefox/*.xpi
packages/react-devtools-extensions/firefox/*.pem
packages/react-devtools-extensions/shared/build
packages/react-devtools-extensions/.tempUserDataDir
packages/react-devtools-inline/dist
packages/react-devtools-shell/dist
packages/react-devtools-timeline/dist
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*


################################## GIT CHEAT SHEET ######################################
#########################################################################################
#########################################################################################
#                               1. GIT CONFIGURATION
#########################################################################################
#  GIT CONFIG
# Get and set configuration variables that control all facets of how Git looks 
# and operates.
# SET THE NAME:
# $ git config --global user.name "User name"
# SET THE EMAIL:
# $ git config --global user.email "himanshudubey481@gmail.com"
# SET THE DEFAULT EDITOR:
# $ git config --global core.editor Vim
# CHECK THE SETTING:
# $ git config -list
#########################################################################################
#  Git alias
# Set up an alias for each command:
# $ git config --global alias.co checkout
# $ git config --global alias.br branch
# $ git config --global alias.ci commit
# $ git config --global alias.st status
#########################################################################################
#                                 2. STARTING A PROJECT
#########################################################################################
#  Git init
# Create a local repository
# $ git init <Repo Name>
#########################################################################################
#  Git clone
# Make a local copy of the server repository.
# $ git clone <remote Url>
#########################################################################################
#                                  3. LOCAL CHANGES
#########################################################################################
#  Git add
# Add a file to staging (Index) area
# $ git add Filename
# Add all files of a repo to staging (Index) area
# $ git add*
#########################################################################################
#  Git commit
# Record or snapshots the file permanently in the version history with a 
# message
# $ git commit -m " Commit Message"
#########################################################################################
#                                  4. TRACK CHANGES
#########################################################################################
#  Git diff
# Track the changes that have not been staged:
# $ git diff
# Track the changes that have staged but not committed:
# $ git diff --staged
# Track the changes after committing a file:
# $ git diff HEAD
# Track the changes between two commits:
# $ git diff <commit1-sha> <commit2-sha>
# Git Diff Branches:
# $ git diff <branch 1> < branch 2>
#########################################################################################
#  Git status
# Display the state of the working directory and the staging area.
# $ git status
#########################################################################################
#  Git show
# Shows objects:
# $ git show <options> <objects>
#########################################################################################
#                               5. COMMIT HISTORY
#########################################################################################
#  Git log
# Display the most recent commits and the status of the head:
# $ git log
# Display the output as one commit per line:
# $ git log –oneline
# Displays the files that have been modified:
# $ git log –stat
# Display the modified files with location:
# $ git log -p
#########################################################################################
#  Git blame
# Display the modification on each line of a file:
# $ git blame <file name>
#########################################################################################
#                               6. IGNORING FILES
#########################################################################################
#  .gitignore
# Specify intentionally untracked files that Git should ignore.
# Create .gitignore:
# $ touch .gitignore
# List the ignored files:
# $ git ls-files -i --exclude-standard
#########################################################################################
#                                   7. BRANCHING
#########################################################################################
#  Git branch
# Create branch:
# $ git branch <branch name>
# List Branch:
# $ git branch --list 
# Delete Branch:
# $ git branch -d<branch name>
# Delete a remote Branch:
# $ git push origin -delete <branch name>
# Rename Branch:
# $ git branch -m <old branch name><new branch name>
#########################################################################################
#  Git checkout
# Switch between branches in a repository.
# Switch to a particular branch:
# $ git checkout <branch name>
# Create a new branch and switch to it:
# $ git checkout -b <branchname>
# Checkout a Remote branch:
# $ git checkout <remotebranch>
#########################################################################################
#  Git stash
# Switch branches without committing the current branch.
# Stash current work:
# $ git stash
# Saving stashes with a message:
# $ git stash save "<Stashing Message>"
# Check the stored stashes:
# $ git stash list 
# Re-apply the changes that you just stashed
# $ git stash apply
# Track the stashes and their changes:
# $ git stash show
# Re-apply the previous commits:
# $ git stash pop
# Delete a most recent stash from the queue:
# $ git stash drop
# Delete all the available stashes at once:
# $ git stash clear
# Stash work on a separate branch:
# $ git stash branch <branch name>
#########################################################################################
#  Git cherry pic
# Apply the changes introduced by some existing commit:
# $ git cherry-pick <commit id> 
#########################################################################################
#                                   8. MERGING
#########################################################################################
#  Git merge
# Merge the branches:
# $ git merge <branch name>
# Merge the specified commit to currently active branch:
# $ git merge <commit>
#########################################################################################
#  Git rebase
# Apply a sequence of commits from distinct branches into a final commit.
# $ git rebase <branch name>
# Continue the rebasing process:
# $ git rebase –continue
# Abort the rebasing process:
# $ git rebase --skip
#########################################################################################
#  Git interactive rebase
# Allow various operations like edit, rewrite, reorder, and more on existing 
# commits.
# $ git rebase -i
#########################################################################################
#                                     9. REMOTE
#########################################################################################
#  Git remote
# Check the configuration of the remote server:
# $ git remote -v 
# Add a remote for the repository:
# $ git remote add <short name><remote URL> 
# Fetch the data from remote server
# $ git fetch <Remote>
# Remove a remote connection from the repository:
# $ git remote rm <destination>
# Rename remote server:
# $ git remote rename <old name><new name>
# Show additional information about a particular remote:
# $ git remote show <remote>
# Change remote:
# $ git remote set-url <remote name><newURL>
#########################################################################################
#  Git origin master
# Push data to remote server:
# $ git push origin master
# Pull data from remote server:
# $ git pull origin master
#########################################################################################
#                                  10. PUSHING UPDATES
#########################################################################################
#  Git push
# Transfer the commits from your local repository to a remote server.
# Push data to remote server:
# $ git push origin master 
# Force push data:
# $ git push <remote><branch> -f 
# Delete a remote branch by push command:
# $ git push origin -delete edited
#########################################################################################
#                                   11. PULLING UPDATES
#########################################################################################
#  Git pull
# Pull the data from the server:
# $ git pull origin master
# Pull a remote branch:
# $ git pull <remote branch URL>
#########################################################################################
#  Git fetch
# Downloads branches and tags from one or more repositories.
# Fetch the remote repository:
# $ git fetch< repository Url>
# Fetch a specific branch:
# $ git fetch <branch URL><branch name>
# Fetch all the branches simultaneously:
# $ git fetch –all
# Synchronize the local repository:
# $ git fetch origin
#########################################################################################
#                                   12. UNDO CHANGES
#########################################################################################
#  Git revert
# Undo the changes
# $ git revert
# Revert a particular commit:
# $ git revert <commit-ish>
#########################################################################################
#  Git reset
# Reset the changes:
# $ git reset –hard
# $ git reset –soft
# $ git reset --mixed
#########################################################################################
#                                  13. REMOVING FILES
#########################################################################################
#  Git rm
# Remove the files from the working tree and from the index:
# $ git rm <file Name>
# Remove files from the Git But keep the files in your local repository:
# $ git rm --cached
#########################################################################################
#                                  14. WORKTREE
#########################################################################################
# git worktree add <path> <branch>
# eg: $ git worktree add ../worktreeName react
#                         {path w/ name} {branchName}
# git worktree list <path>
# git worktree remove [-f] <worktree>
# git worktree lock [--reason <string>] <worktree>
# git worktree move <worktree> <new-path>
# git worktree prune [-n] [-v] [--expire <expire>]
# git worktree repair [<path>…​]
# git worktree unlock <worktree>


#########################################################################################
#                                  Branch from last commits
#########################################################################################
#Create the branch using a commit hash:
#
#git branch branch_name <commit-hash>
#Or by using a symbolic reference:
#
#git branch branch_name HEAD~3
#To checkout the branch while creating it, use:
#
#git checkout -b branch_name <commit-hash or HEAD~3>


#########################################################################################
#                                  GIT DELETING BETWEEN COMMITS
#########################################################################################
# --onto Method
# After going through Many blogs and Manual, I found 1 blog here which really let me know how to use it. So the command I used is:

# hash0 -> hash1-> hash2-> hash3-> hash4-> hash5->

# git rebase --onto 'hash2' 'hash5~1'

#commits between hash2 & hash5 would be deleted (i.e hash3 & hash4 del) now your last commit would be hash2 ,you have to resolve conflict if any and the start commiting hash5 and so on..
#https://tanzu.vmware.com/developer/guides/git-rebase-onto-gs/  👉for help